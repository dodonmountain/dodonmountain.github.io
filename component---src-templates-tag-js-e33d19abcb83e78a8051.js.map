{"version":3,"sources":["webpack:///./src/templates/tag.js"],"names":["pageQuery","Tag","pageContext","data","posts","allMarkdownRemark","edges","labels","site","siteMetadata","console","log","tag","tagHeaderTag","tagHeader","totalCount","title","keywords","className","map","post","tags","node","frontmatter","to","fields","slug","key","id","date","excerpt","techTags","forEach","i","label","push","tech","name","size","color","getTechTags"],"mappings":"iQA2FaA,EAAS,aAwCPC,UAxHH,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAClBC,EAAQD,EAAKE,kBAAkBC,MAC/BC,EAASJ,EAAKK,KAAKC,aAAaF,OACtCG,QAAQC,IAAIT,EAAYU,KAHW,IAM7BC,EAAY,GAFFX,EAARU,IAGFE,EAAS,WAFQX,EAAKE,kBAApBU,WAEO,aAcf,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,MAAM,eAAeC,SAAU,CAAC,SAAD,8DACpC,yBAAKC,UAAU,cACX,yBAAKA,UAAU,qBACX,kBAAC,IAAD,OAGJ,yBAAKA,UAAU,uBACX,wBAAIA,UAAU,qBACd,0BAAMA,UAAU,4BAA4BL,GAC3CC,GAEIV,EAAMe,KAAI,SAACC,GACR,IAAMC,EAAOD,EAAKE,KAAKC,YAAYF,KACnC,OACI,kBAAC,OAAD,CACAG,GAAIJ,EAAKE,KAAKG,OAAOC,KACrBR,UAAU,sDAEV,yBAAKS,IAAKP,EAAKE,KAAKM,GAAIV,UAAU,2BAClC,wBAAIA,UAAU,0BAA0BE,EAAKE,KAAKC,YAAYP,OAE9D,2BAAOE,UAAU,6BAA4B,2BAAIE,EAAKE,KAAKC,YAAYM,KAA1B,UAE7C,uBAAGX,UAAU,iBAAiBE,EAAKE,KAAKQ,SACxC,yBAAKZ,UAAU,gBAtCvB,SAACG,GACjB,IAAMU,EAAW,GAQjB,OAPAV,EAAKW,SAAQ,SAACpB,EAAKqB,GACf1B,EAAOyB,SAAQ,SAACE,GACRtB,IAAQsB,EAAMtB,KACdmB,EAASI,KAAK,kBAAC,IAAD,CAASR,IAAKM,EAAGrB,IAAKsB,EAAMtB,IAAKwB,KAAMF,EAAME,KAAMC,KAAMH,EAAMG,KAAMC,KAAMJ,EAAMI,KAAMC,MAAOL,EAAMK,eAIvHR,EA8BkBS,CAAYnB","file":"component---src-templates-tag-js-e33d19abcb83e78a8051.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"../pages/index.css\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\nimport TechTag from \"../components/tags/TechTag\"\n\nconst Tag = ({ pageContext, data }) => {\n    const posts = data.allMarkdownRemark.edges\n    const labels = data.site.siteMetadata.labels\n    console.log(pageContext.tag)\n    const { tag } = pageContext\n    const { totalCount } = data.allMarkdownRemark\n    const tagHeaderTag = `${tag}`\n    const tagHeader = ` 태그로 찾은 ${totalCount}개의 포스트입니다 `\n\n    const getTechTags = (tags) => {\n        const techTags = []\n        tags.forEach((tag, i) => {\n            labels.forEach((label) => {\n                if (tag === label.tag) {\n                    techTags.push(<TechTag key={i} tag={label.tag} tech={label.tech} name={label.name} size={label.size} color={label.color} />)\n                }\n            })\n        })\n        return techTags\n    }\n\n    return (\n        <Layout>\n            <SEO title=\"SearchResult\" keywords={[`gatsby`, `javascript`, `react`, `web development`, `node.js`, `graphql`]} />\n            <div className=\"index-main\">\n                <div className=\"sidebar px-4 py-2\">\n                    <Sidebar />\n                </div>\n\n                <div className=\"post-list-main mt-5\">\n                    <h3 className=\"heading text-dark\">\n                    <span className=\"headerTag text-uppercase\">{tagHeaderTag}</span>\n                    {tagHeader}\n                    </h3>\n                        {posts.map((post) => {\n                            const tags = post.node.frontmatter.tags\n                            return (\n                                <Link\n                                to={post.node.fields.slug}\n                                className=\"text-dark text-decoration-none container post-card\"\n                                >\n                                <div key={post.node.id} className=\"mt-3 pb-3 border-bottom\">\n                                <h2 className=\"title mb-2 text-danger\">{post.node.frontmatter.title}</h2>\n                                \n                                <small className=\"d-block text-primary mb-3\"><i>{post.node.frontmatter.date}에 게시됨</i>\n                                </small>\n                                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                                <div className=\"d-block mt-3\">\n                                {getTechTags(tags)}\n                                </div>\n                            </div>\n                            </Link>\n                            )\n                        })}\n                </div>\n            </div>\n        </Layout>\n    )\n}\n\nTag.propTypes = {\n    pageContext: PropTypes.shape({\n        tag: PropTypes.string.isRequired,\n    }),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    node: PropTypes.shape({\n                        frontmatter: PropTypes.shape({\n                            title: PropTypes.string.isRequired,\n                        }),\n                    }),\n                }).isRequired\n            ),\n        }),\n    }),\n}\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n        siteMetadata {\n            title \n            author\n            labels {\n                tag\n                tech \n                name \n                size \n                color\n            } \n        }\n    } \n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n         node {\n            excerpt(pruneLength: 200)\n            html\n            id\n            frontmatter {\n                title\n                date(formatString: \"MMMM, YYYY\")\n                tags\n            }\n             fields {\n                slug\n            }\n        }\n      }\n    }\n  }\n`\n\nexport default Tag"],"sourceRoot":""}